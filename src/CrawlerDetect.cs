using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace Tessin.Core.Channels.Collect
{
    static class CrawlerDetect
    {

        //Ported from: https://github.com/JayBizzle/Crawler-Detect/blob/master/src/CrawlerDetect.php#L79

        public static string[] _ignore = {
	        @"Safari.[\d\.]*",
            @"Firefox.[\d\.]*",
            @"Chrome.[\d\.]*",
            @"Chromium.[\d\.]*",
            @"MSIE.[\d\.]",
            @"Opera\/[\d\.]*",
            @"Mozilla.[\d\.]*",
            @"AppleWebKit.[\d\.]*",
            @"Trident.[\d\.]*",
            @"Windows NT.[\d\.]*",
            @"Android.[\d\.]*",
            @"Macintosh.",
            @"Ubuntu",
            @"Linux",
            @"[ ]Intel",
            @"Mac OS X",
            @"Gecko.[\d\.]*",
            @"KHTML",
            @"CriOS.[\d\.]*",
            @"CPU iPhone OS ([0-9_])* like Mac OS X",
            @"CPU OS ([0-9_])* like Mac OS X",
            @"iPod",
            @"like Gecko",
            @"compatible",
            @"x86_..",
            @"i686",
            @"x64",
            @"X11",
            @"rv:[\d\.]*",
            @"Version.[\d\.]*",
            @"WOW64",
            @"Win64",
            @"Dalvik.[\d\.]*",
            @"\.NET CLR [\d\.]*",
            @"Presto.[\d\.]*",
       	    @"Media Center PC",	
	    };

        public static string[] _bots = {
		    @"008\\/",
            @"A6-Indexer",
            @"Aboundex",
            @"Accoona-AI-Agent",
            @"acoon",
            @"AddThis",
            @"ADmantX",
            @"AHC",
            @"Airmail",
            @"Anemone",
            @"Arachmo",
            @"archive-com",
            @"B-l-i-t-z-B-O-T",
            @"bibnum\.bnf",
            @"biglotron",
            @"binlar",
            @"BingPreview",
            @"boitho\.com-dc",
            @"BUbiNG",
            @"Butterfly\\/",
            @"BuzzSumo",
            @"CapsuleChecker",
            @"CC Metadata Scaper",
            @"Cerberian Drtrs",
            @"changedetection",
            @"Charlotte",
            @"clips\.ua\.ac\.be",
            @"CloudFlare-AlwaysOnline",
            @"coccoc",
            @"Commons-HttpClient",
            @"convera",
            @"cosmos",
            @"Covario-IDS",
            @"curl",
            @"CyberPatrol",
            @"Dragonfly File Reader",
            @"DataparkSearch",
            @"dataprovider",
            @"Digg",
            @"DomainAppender",
            @"drupact",
            @"EARTHCOM",
            @"ECCP",
            @"ec2linkfinder",
            @"ElectricMonk",
            @"Embedly",
            @"europarchive\.org",
            @"EventMachine HttpClient",
            @"ExactSearch",
            @"ezooms",
            @"eZ Publish Link Validator",
            @"facebookexternalhit",
            @"FeedBurner",
            @"Feedfetcher-Google",
            @"FeedValidator",
            @"FindLinks",
            @"findlink",
            @"findthatfile",
            @"Flamingo_SearchEngine",
            @"fluffy",
            @"getprismatic\.com",
            @"g00g1e\.net",
            @"GigablastOpenSource",
            @"grub-client",
            @"Genieo",
            @"Go-http-client",
            @"Google-HTTP-Java-Client",
            @"Google favicon",
            @"Google Keyword Suggestion",
            @"heritrix",
            @"Holmes",
            @"htdig",
            @"httpunit",
            @"httrack",
            @"HubSpot Marketing Grader",
            @"ichiro",
            @"infegy",
            @"igdeSpyder",
            @"InAGist",
            @"InfoWizards Reciprocal Link System PRO",
            @"integromedb",
            @"IODC",
            @"IOI",
            @"ips-agent",
            @"iZSearch",
            @"L\.webis",
            @"Larbin",
            @"libwww",
            @"Link Valet",
            @"linkdex",
            @"LinkExaminer",
            @"LinkWalker",
            @"Lipperhey Link Explorer",
            @"Lipperhey SEO Service",
            @"LongURL API",
            @"ltx71",
            @"lwp-trivial",
            @"MegaIndex\.ru",
            @"mabontland",
            @"MagpieRSS",
            @"Mediapartners-Google",
            @"MetaURI",
            @"Mnogosearch",
            @"mogimogi",
            @"Morning Paper",
            @"Mrcgiguy",
            @"MVAClient",
            @"Netcraft Web Server Survey",
            @"netresearchserver",
            @"NewsGator",
            @"newsme",
            @"NG-Search",
            @"^NING\\/",
            @"Notifixious",
            @"nutch",
            @"NutchCVS",
            @"Nymesis",
            @"oegp",
            @"Omea Reader",
            @"online link validator",
            @"Online Website Link Checker",
            @"Orbiter",
            @"ow\.ly",
            @"Ploetz \+ Zeller",
            @"page2rss",
            @"panscient",
            @"Peew",
            @"phpcrawl",
            @"Pinterest",
            @"Pizilla",
            @"Plukkie",
            @"Pompos",
            @"postano",
            @"PostPost",
            @"postrank",
            @"proximic",
            @"PycURL",
            @"Python-httplib2",
            @"python-requests",
            @"Python-urllib",
            @"Qseero",
            @"Qwantify",
            @"Radian6",
            @"RebelMouse",
            @"REL Link Checker",
            @"RetrevoPageAnalyzer",
            @"Riddler",
            @"Robosourcer",
            @"Ruby",
            @"SBIder",
            @"ScoutJet",
            @"ScoutURLMonitor",
            @"Scrapy",
            @"Scrubby",
            @"SearchSight",
            @"semanticdiscovery",
            @"SEOstats",
            @"Seznam screenshot-generator",
            @"ShopWiki",
            @"SiteBar",
            @"siteexplorer\.info",
            @"slider\.com",
            @"slurp",
            @"Snappy",
            @"sogou",
            @"speedy",
            @"Sqworm",
            @"StackRambler",
            @"Stratagems Kumo",
            @"summify",
            @"teoma",
            @"theoldreader\.com",
            @"TinEye",
            @"Traackr.com",
            @"truwoGPS",
            @"Typhoeus",
            @"tweetedtimes\.com",
            @"Twikle",
            @"UdmSearch",
            @"UnwindFetchor",
            @"updated",
            @"urlresolver",
            @"Validator\.nu\\/LV",
            @"Vagabondo",
            @"Vivante Link Checker",
            @"Vortex",
            @"voyager\\/",
            @"VYU2",
            @"W3C-checklink",
            @"W3C_CSS_Validator_JFouffa",
            @"W3C_I18n-Checker",
            @"W3C-mobileOK",
            @"W3C_Unicorn",
            @"W3C_Validator",
            @"WebIndex",
            @"Websquash\.com",
            @"webcollage",
            @"webmon ",
            @"WeSEE:Search",
            @"wf84",
            @"wget",
            @"WomlpeFactory",
            @"wotbox",
            @"Xenu Link Sleuth",
            @"XML Sitemaps Generator",
            @"Y!J-ASR",
            @"yacy",
            @"Yahoo Ad monitoring",
            @"Yahoo Link Preview",
            @"Yahoo! Slurp China",
            @"Yahoo! Slurp",
            @"YahooSeeker",
            @"YahooSeeker-Testing",
            @"YandexImages",
            @"YandexMetrika",
            @"YandexDirectDyn",
            @"yandex",
            @"yanga",
            @"yeti",
            @"yoogliFetchAgent",
            @"Zao",
            @"ZyBorg",
            @"[a-z0-9\\-_]*((?<!cu)bot|crawler|archiver|transcoder|spider|scraper)",
	    };

        private static readonly Lazy<Regex> IgnoreRegex = new Lazy<Regex>(() => new Regex(string.Join("|", _ignore), RegexOptions.Compiled | RegexOptions.IgnoreCase));

        private static readonly Lazy<Regex> BotsRegex = new Lazy<Regex>(() => new Regex(string.Join("|", _bots), RegexOptions.Compiled | RegexOptions.IgnoreCase));

        public static bool IsCrawler(string userAgent)
        {
            userAgent = IgnoreRegex.Value.Replace(userAgent, "");

            return BotsRegex.Value.IsMatch(userAgent);
        }

    }

}
